#include "PID.h"
#include "Tool.h"
static void ki_value_amplitude_limit(PID *pid,int32 amplitude);
static void ki_value_separation(PID *pid,int32 separation_value);
void pid_init(PID *pid, int32 kp, int32 ki, int32 kd)
{
    pid->expect_value = 0;
    pid->last_err_value = 0;
    pid->total_value = 0;
    pid->err_value = 0;
    pid->kp_value = 0;
    pid->ki_value = 0;
    pid->kd_value = 0;
    pid->kp = kp;
    pid->ki = ki;
    pid->kd = kd;
}
/*
 * control fan speed to rising tem
 */
void fan_speed_cal(int32 now_value)
{
    /**
     * calculate pid value
     */
    pid.err_value = pid.expect_value - now_value;
    pid.kp_value = pid.kp * pid.err_value;
    ki_value_separation(200);
    pid.kd_value = pid.kd * (pid.err_value - pid.last_err_value);
    pid.total_value = pid.kp_value + pid.ki_value + pid.kd_value;
    /**
     * final controlling element
     */
    control_fan_speed(pid.total_value);
    pid.last_err_value = pid.err_value;
}
/**
 * amplitude limiting for ki value
 */
static void ki_value_amplitude_limit(PID *pid,int32 amplitude)
{
    if (pid->ki_value > amplitude)
        pid->ki_value = amplitude;
	else if(-pid->ki_value >amplitude)
		pid->ki_value = -amplitude;
}
/**
 * separation for ki value
 */
static void ki_value_separation(PID *pid,int32 separation_value)
{
    Uint32 err_abs_value = getAbsValue(pid.err_value);
    if (err_abs_value < separation_value)
    {
        pid.ki_value += (pid.ki * pid.err_value);
        ki_value_amplitude_limit(150);
    }
    else
    {
        pid.ki_value = 0;
    }
}
