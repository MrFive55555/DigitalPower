#include "PID.h"
#include "Tool.h"
void ki_value_separation(PID *pid, Uint32 separation_value);
static void pid_value_amplitude_limit(int32 *value, int32 amplitude);
void pid_init(PID *pid, int32 kp, int32 ki, int32 kd)
{
    pid->expect_value = 0;
    pid->last_err_value = 0;
    pid->total_value = 0;
    pid->err_value = 0;
    pid->kp_value = 0;
    pid->ki_value = 0;
    pid->kd_value = 0;
    pid->kp = kp;
    pid->ki = ki;
    pid->kd = kd;
}
/**
 * separation for kp value
 */
void ki_value_separation(PID *pid, Uint32 separation_value, Uint32 max_kp_value)
{
    Uint32 err_abs_value = getAbsValue(pid->err_value);
    if (err_abs_value < separation_value)
    {
        pid->ki_value += (pid->ki * pid->err_value);
        pid_value_amplitude_limit(pid->ki_value, max_kp_value);
    }
    else
    {
        pid->ki_value = 0;
    }
}
/**
 * amplitude limiting for pid value
 */
static void pid_value_amplitude_limit(int32 *value, int32 amplitude)
{
    if (*value > amplitude)
        *value = amplitude;
    else if (-(*value) > amplitude)
        *value = -amplitude;
}
